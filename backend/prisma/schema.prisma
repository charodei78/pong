// This is your Prisma schema file,
// learn more about it in the docs https//pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  User
  Admin
}

enum ChatType {
  Chat
  Channel
}

model User {
  id           Int              @id @default(autoincrement())
  name         String           @db.VarChar(32)
  email        String           @unique @db.VarChar(128)
  login        String           @unique @db.VarChar(24)
  password     String           @db.VarChar(64)
  roles        Role[]
  created_at   DateTime         @default(now())
  updated_at   DateTime         @updatedAt
  avatar       String[]
  followedBy   User[]           @relation("UserFollows", references: [id])
  following    User[]           @relation("UserFollows", references: [id])
  chats        Chat[]           @relation("members")
  adminChats   Chat[]           @relation("admins")
  ownChats     Chat[]
  chatPunish   ChatPunishment[] @relation("chatPunish")
  chatPunished ChatPunishment[] @relation("chatPunished")
  chatMessages ChatMessage[]
  TwoFactorAuth Boolean @default(false)
  AuthCodes    AuthCode[] 
  deleted_at   DateTime?
}

model AuthCode {
  id String    @id @default(uuid()) @db.Uuid
  codeHash String 
  user User  @relation(fields: [user_id], references: [id]) 
  user_id Int
  created_at DateTime @default(now())
}


enum PunishmentDegree {
  BAN
  MUTE
  SELF_MUTE
}

model ChatPunishment {
  id         String           @id @default(uuid()) @db.Uuid
  chat       Chat             @relation("punishments", fields: [chatId], references: [id])
  chatId     String           @db.Uuid
  fromUser   User             @relation("chatPunish", fields: [fromUserId], references: [id])
  fromUserId Int
  toUser     User             @relation("chatPunished", fields: [toUserId], references: [id])
  toUserId   Int
  degree     PunishmentDegree
  created_at DateTime         @default(now())
  minutes    Int              @default(1)

  @@unique([chatId, fromUserId, toUserId, degree])
}

model Chat {
  id          String           @id @default(uuid()) @db.Uuid
  name        String?          @db.VarChar(32)
  members     User[]           @relation("members")
  admins      User[]           @relation("admins")
  owner       User             @relation(fields: [ownerId], references: [id])
  punishments ChatPunishment[] @relation("punishments")
  ownerId     Int
  type        ChatType
  is_private  Boolean
  password    String?          @db.VarChar(64)
  messages    ChatMessage[]
}

model ChatMessage {
  id         String   @id @default(uuid()) @db.Uuid
  chat       Chat     @relation(fields: [chatId], references: [id])
  chatId     String   @db.Uuid
  created_at DateTime @default(now())
  message    String   @db.VarChar(256)
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
}
